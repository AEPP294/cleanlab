.. _issue_manager_creating_your_own:

Creating Your Own Issues Manager
================================



This guide will walk you through the process of creating creating your own 
:py:class:`IssueManager <cleanlab.experimental.datalab.issue_manager.issue_manager.IssueManager>`
to extend the issue-checking capabilities of 
:py:class:`Datalab <cleanlab.experimental.datalab.datalab.Datalab>`.


.. _basic_issue_manager:

Basic Issue Check
~~~~~~~~~~~~~~~~~


To create a basic issue manager, inherit from the
:py:class:`IssueManager <cleanlab.experimental.datalab.issue_manager.issue_manager.IssueManager>` class,
assign a name to the class as the class-variable, ``issue_name``, and implement the ``find_issues`` method.

The ``find_issues`` method should mark each example in the dataset as an issue or not with a boolean array.
It should also provide a score for each example in the dataset that quantifies the quality of the example
with regards to the issue.

.. code-block:: python

    import numpy as np
    import pandas as pd
    from cleanlab import IssueManager

    class Basic(IssueManager):
        issue_name = "basic"
        def find_issues(self, **kwargs) -> None:
            scores = np.random.rand(len(self.datalab.data))
            self.issues = pd.DataFrame(
                {
                    f"is_{self.issue_name}_issue" : scores < 0.1,
                    self.issue_score_key : scores,
                },
            )
            self.summary = self.get_summary(score = scores.mean())

.. _intermediate_issue_manager:

Intermediate Issue Check
~~~~~~~~~~~~~~~~~~~~~~~~


To create an intermediate issue:

- Perform the same steps as in the :ref:`basic issue check <basic_issue_manager>` section.
- Populate the ``info`` attribute with a dictionary of information about the identified issues.

The information can be included in a report generated by :py:class:`Datalab <cleanlab.experimental.datalab.datalab.Datalab>`,
if you add any of the keys to the ``verbosity_levels`` property of the class.

.. code-block:: python

    import numpy as np
    import pandas as pd
    from cleanlab import IssueManager

    class Intermediate(IssueManager):
        issue_name = "intermediate"
        def find_issues(self, *, intermediate_arg: int, **kwargs: Any) -> None:
            N = len(self.datalab.data)
            raw_scores = np.random.rand(N)
            std = raw_scores.std()
            self.threshold = min(0, raw_scores.mean() - std)
            sin_filter = np.sin(intermediate_arg * np.arange(N) / N)
            kernel = sin_filter ** 2
            scores = np.convolve(raw_scores, kernel, mode="same")
            self.issues = pd.DataFrame(
                {
                    f"is_{self.issue_name}_issue" : scores < self.threshold,
                    self.issue_score_key : scores,
                },
            )
            self.summary = self.get_summary(score = scores.mean())
            self.info = {
                "std": std,
                "raw_scores": raw_scores,
                "kernel": kernel,
            }

        @property
        def verbosity_levels(self) -> Dict[int, Dict[str, List[str]]]:
            return {
                0: {
                    "issues": ["raw_scores"],
                },
                1: {
                    "info": ["std"],
                },
                2: {
                    "issues": ["kernel"],
                },
            }

Advanced Issue Check
~~~~~~~~~~~~~~~~~~~~

.. note::

    WIP: This section is a work in progress.