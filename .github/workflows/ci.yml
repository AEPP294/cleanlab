name: CI
on:
  push:
  pull_request:
  schedule:
    - cron: '0 8 * * 6'
jobs:
  test:
    name: "Test: Python ${{ matrix.python }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install development dependencies
        run: pip install -r requirements-dev.txt
      - name: Overwrite tensorflow version on Windows
        if: matrix.os == 'windows-latest'
        run: |
          pip uninstall -y tensorflow
          pip install tensorflow-cpu
      - name: Install cleanlab
        run: pip install -e .
      - name: Test with coverage
        run: pytest --verbose --cov=cleanlab/ --cov-config .coveragerc --cov-report=xml
      - uses: codecov/codecov-action@v2
  test-minimal-dependencies:
    name: "Test: Python ${{ matrix.python }} optional dependencies"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install cleanlab
        run: pip install -e .
      - name: Python version check == ${{ matrix.python }}
        run:  python3 --version
      - name: Minimal test classification.py
        run: python3 -c "import cleanlab; from cleanlab.classification import CleanLearning; cl = CleanLearning(); print(cl)"
      - name: Minimal test count.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.count import num_label_issues;x = num_label_issues(labels=np.array([1,0,0]),pred_probs=np.array([[0.2,0.8],[0.9,0.1],[0.5,0.5]]));print(x)"
      - name: Minimal test dataset.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.dataset import rank_classes_by_label_quality;x=rank_classes_by_label_quality(labels=np.array([1,0,0]),pred_probs=np.array([[0.2,0.8],[0.9,0.1],[0.5,0.5]]));print(x)"
      - name: Minimal test filter.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.filter import find_label_issues;x=find_label_issues(labels=np.array([1,0,0]),pred_probs=np.array([[0.2,0.8],[0.9,0.1],[0.5,0.5]]));print(x)"
      - name: Minimal test multiannotator.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.multiannotator import get_majority_vote_label;x=get_majority_vote_label(labels_multiannotator=np.array([[1,0,0],[1,0,1],[1,0,0]]),pred_probs=np.array([[0.2,0.8],[0.9,0.1],[0.5,0.5]]));print(x)"
      - name: Minimal test outlier.py
        run: python3 -c "import cleanlab; from cleanlab.outlier import OutOfDistribution; ood = OutOfDistribution(); print(ood)"
      - name: Minimal test rank.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.rank import get_self_confidence_for_each_label;x=get_self_confidence_for_each_label(labels=np.array([1,0,0]),pred_probs=np.array([[0.2,0.8],[0.9,0.1],[0.5,0.5]]));print(x)"
      - name: Minimal test typing.py
        run: python3 -c "import cleanlab; from cleanlab import typing"
      - name: Minimal test token_classification/filter.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.token_classification.filter import find_label_issues; x=find_label_issues(labels=[[0, 0, 1], [0, 1]], pred_probs=[np.array([[0.9, 0.1], [0.7, 0.3], [0.05, 0.95]]),np.array([[0.8, 0.2], [0.8, 0.2]]),]);print(x)"
      - name: Minimal test token_classification/rank.py
        run: python3 -c "import cleanlab; import numpy as np; from cleanlab.token_classification.rank import get_label_quality_scores; x=get_label_quality_scores(labels=[[0, 0, 1], [0, 1]], pred_probs=[np.array([[0.9, 0.1], [0.7, 0.3], [0.05, 0.95]]),np.array([[0.8, 0.2], [0.8, 0.2]]),]);print(x)"
      - name: Minimal test token_classification/summary.py
        run: python3 -c "import cleanlab; from cleanlab.token_classification.summary import display_issues;display_issues(issues=[(2, 0), (0, 1)],tokens=[['A', '?weird', 'sentence'],['A', 'valid', 'sentence'],['An', 'sentence', 'with', 'a', 'typo']])"
      - name: Minimal test benchmarking/noise_generation.py
        run: python3 -c "import cleanlab; from cleanlab.benchmarking.noise_generation import generate_noise_matrix_from_trace;X=generate_noise_matrix_from_trace(5,2.3);print(X)"
  typecheck:
    name: Type check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .  # install dependencies
          pip install -r requirements-dev.txt  # install development dependencies and type stubs
      - name: Type check
        run: mypy --install-types --non-interactive --allow-redefinition cleanlab
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
  nblint:
    name: Lint Notebooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: nblint
        run: ./.ci/nblint.py docs
